ext {
    pomFile = file("${project.buildDir}/libs/pom.xml")
}

task generatePom(type: GenerateMavenPom) {
    destination = pomFile
}
model {
    tasks.generatePom {
        pom = publishing.publications.objectdiff.pom
    }
}
 
configurations {
   pom
}

artifacts {
    pom(pomFile) {
        builtBy generatePom
    }
}

signing {
    sign configurations.archives
    sign configurations.pom
}

def getJarSignatures = {
    def allFiles = project.tasks.signArchives.signatureFiles.collect { it }
    def signedSources = allFiles.find { it.name.contains('-sources') }
    def signedJavadoc = allFiles.find { it.name.contains('-javadoc') }
    def signedJar = (allFiles - [signedSources, signedJavadoc])[0]
    return [
            [source: signedSources, classifier: 'sources', extension: 'jar.asc'],
            [source: signedJavadoc, classifier: 'javadoc', extension: 'jar.asc'],
            [source: signedJar,     classifier: null,      extension: 'jar.asc']
    ]
}

def getPomSignature = {
    return [source: project.tasks.signPom.signatureFiles.collect{it}[0], classifier: null, extension: 'pom.asc']
}

publishing {
    publications {
        objectdiff(MavenPublication) {
            //Add jars
            artifact jar
            artifact javadocJar
            artifact sourcesJar
            
            //Add signed jars
            getJarSignatures().each() { signature ->
                artifact signature
            }
            
            //Add signed pom
            artifact getPomSignature()
            
            //pom gets added automatically
            pom.packaging = 'jar'
            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    packaging 'jar'
                    name 'SpongeMatchers'
                    description '<TODO>'
                    url 'https://monospark.org/projects/sponge/spongematchers'
                    inceptionYear '2016'
                }
            }
        }
    }
    
    repositories {
        maven {
            url "https://repo.monospark.org/content/repositories/${(isSnapshot ? 'snapshots' : 'releases')}/"
            credentials {
                username = project.getProperty('repoUsername')
                password = project.getProperty('repoPassword')
            }
        }
    }
}